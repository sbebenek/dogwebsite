{"version":3,"sources":["components/WebsiteHeader.js","components/Home.js","components/dogs/Details.js","components/dogs/List.js","components/dogs/Add.js","components/dogs/Update.js","components/dogs/ChangeImage.js","components/About.js","components/Contact.js","components/SignIn.js","components/NoMatch.js","components/MasterPage.js","App.js","serviceWorker.js","index.js"],"names":["WebsiteHeader","props","state","username","redirectHome","signInHolder","to","className","updateSignInButtonArea","bind","signOutAndRedirect","console","log","this","prevProps","setState","signout","newUsername","onClick","role","aria-label","type","data-toggle","data-target","aria-controls","aria-expanded","id","React","Component","Home","dogList","dogHolder","class","drawDogList","fetch","then","res","json","list","delay","style","animationName","animationTimingFunction","animationDuration","animationDelay","animationIterationCount","animationDirection","animationFillMode","forEach","element","order","map","item","dogImage","encodeURI","dogimageref","age","dogage","Number","key","dogid","src","alt","dogname","doglocation","doggender","dogbreed","textAlign","Details","match","params","isAdmin","parseInt","pageContent","name","breed","gender","weight","color","description","location","imageSource","show","deleteButtonHolder","redirectHolder","commandPanel","handleShow","handleClose","handleDelete","queryString","window","search","urlParams","URLSearchParams","get","result","dogweight","dogcolor","dogdescription","checkIfAdmin","catch","err","tableHolder","method","headers","jwtToken","response","status","signOut","redirectToLogin","Error","commandMessage","getList","Modal","onHide","Header","closeButton","Title","Body","Footer","List","numberOfPages","Math","ceil","length","elementsPerPage","pageCount","page","initialDrawCards","currentlySelectedDogs","currentPage","pageLinks","redirect","drawPageButtons","dogListIndex","undefined","dogSubList","slice","pageLinkElements","i","push","redrawCards","modCurrentPage","String","cards","document","getElementsByClassName","existingCards","setAttribute","path","testDrawCard","Add","userIsAdmin","redirectToDetails","errorMessage","handleChange","handleSubmit","successMessage","failureMessage","redirectToList","e","value","target","preventDefault","checkValidity","data","body","JSON","stringify","checkIfSignedIn","action","onSubmit","noValidate","htmlFor","onChange","required","checked","step","rows","Update","loadForm","validId","maleCheck","femaleCheck","uploadedImage","handleImageUpload","pathname","substring","lastIndexOf","isNaN","event","files","encType","ChangeImage","size","exec","URL","createObjectURL","multiple","accept","FormData","file","append","values","statusText","About","buttonCount","increaseCount","href","width","Contact","email","subject","message","SignIn","require","signedInUsername","password","redirectToHome","getElementById","innerHTML","cookie","isadmin","refreshToken","signin","NoMatch","MasterPage","deleteCookies","checkCookies","title","getCookie","exact","render","component","cname","ca","decodeURIComponent","split","c","charAt","indexOf","App","Boolean","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.3dd884b1.chunk.js","sourcesContent":["import React from 'react';\r\n//import the react routing functionality - source: https://reacttraining.com/react-router/web/guides/quick-start\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nexport class WebsiteHeader extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: this.props.username,\r\n            redirectHome: '',\r\n            signInHolder: <Link to=\"/signin\"><button className=\"btn btn-outline-light my-2 my-sm-0\">Sign In</button></Link>\r\n        }\r\n        this.updateSignInButtonArea = this.updateSignInButtonArea.bind(this);\r\n        this.signOutAndRedirect = this.signOutAndRedirect.bind(this);\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        console.log(\"header did mount - username: \" + this.state.username);\r\n        this.updateSignInButtonArea(this.props.username);\r\n\r\n    }\r\n\r\n    //will call whenever new props are received\r\n    componentDidUpdate(prevProps) {\r\n        console.log(\"WebsiteHeader received new props!\");\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.username !== prevProps.username) {\r\n            console.log(\"The new prop was different from the old one - new username: \" + this.props.username)\r\n            this.setState({ username: this.props.username });\r\n            this.updateSignInButtonArea(this.props.username);\r\n        }\r\n    }\r\n\r\n    signOutAndRedirect() {\r\n        this.props.signout();\r\n        this.setState({ redirectHome: <Redirect to=\"/\" /> });\r\n    }\r\n\r\n    updateSignInButtonArea(newUsername) {\r\n        console.log(\"drawing sign in button area based on state...\")\r\n        //if the username prop is empty, then no one is logged in - display sign in button \r\n        if (newUsername === null) {\r\n            console.log(\"username is null. drawing sign in button...\");\r\n            this.setState({ signInHolder: <Link to=\"/signin\"><button className=\"btn btn-outline-light my-2 my-sm-0\">Sign In</button></Link> });\r\n        }\r\n        else {\r\n            console.log(\"username is not null. drawing sign out button...\");\r\n            //TODO: set the username to be a dropdown menu instead of having the sign out button\r\n            this.setState({\r\n                signInHolder: (\r\n                    <div className=\"form-inline\">\r\n                        <p className=\"nav-link custom-nav-item my-auto\">{newUsername}</p>\r\n                        <button onClick={this.signOutAndRedirect} className=\"btn btn-outline-light my-2 my-sm-0 btn-sm\">Sign Out</button>\r\n                    </div>\r\n                )\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                {this.state.redirectHome}\r\n                <nav className=\"navbar navbar-expand-lg header-background\" >\r\n                    <Link to=\"/\"><span className=\"navbar-brand custom-nav-item\"><span role=\"img\" aria-label=\"paw print emoji\">&#x1f43e;</span> Dog Website</span></Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav mr-auto\">\r\n                            <li className=\"nav-item\"> {/*use 'active' class next to 'nav-item' to set that page is active */}\r\n                                <Link to=\"/\" className=\"nav-link custom-nav-item\"><span className=\"\">Home</span></Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link to=\"/dogs\" className=\"nav-link custom-nav-item\"><span className=\"\">Dogs</span></Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link to=\"/contact\" className=\"nav-link custom-nav-item\"><span className=\"\">Contact</span></Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link to=\"/about\" className=\"nav-link custom-nav-item\"><span className=\"\">About Us</span></Link>\r\n                            </li>\r\n\r\n\r\n                        </ul>\r\n\r\n                        {/* This is where it will check for props, and display username and a dropdown menu if signed in */}\r\n                        {this.state.signInHolder}\r\n\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dogList: [],\r\n            dogHolder: (\r\n                <div className=\"center\">\r\n                    <div class=\"spinner-border text-success\" role=\"status\">\r\n                        <span class=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        this.drawDogList = this.drawDogList.bind(this);\r\n    }\r\n    componentWillMount() {\r\n        fetch('/api/dogs/new')\r\n            .then(res => res.json())\r\n            .then((list) => {\r\n                console.log(list);\r\n                this.setState({ dogList: list });\r\n            })\r\n            .then(() => this.drawDogList());\r\n    }\r\n\r\n    //this function draws the dogs in this.state.dogList to the this.state.dogHolder as JSX elements\r\n    drawDogList() {\r\n        //create the delay style animation\r\n        let delay=1.5; //change this number to change the delay start\r\n        this.state.dogList.forEach(element => {\r\n            element.order = delay;\r\n            delay += 0.1;\r\n        });\r\n\r\n        //creates a custom style based on the given delay (in seconds)\r\n        function style(delay) {\r\n            return {\r\n                animationName: 'cardAppear',\r\n                animationTimingFunction: 'ease-in-out',\r\n                animationDuration: '0.3s',\r\n                animationDelay: delay + 's',\r\n                animationIterationCount: 1,\r\n                animationDirection: 'normal',\r\n                animationFillMode: 'forwards'\r\n            }\r\n        };\r\n\r\n\r\n\r\n        this.setState({\r\n            dogHolder: (\r\n                <div>\r\n                    <div className=\"home-image-holder\">\r\n                        {this.state.dogList.map((item) => {\r\n                            let dogImage = encodeURI(\"../public/images/default.jpg\");\r\n                            if (item.dogimageref !== \"\" && item.dogimageref !== null) {\r\n                                dogImage = \r\n                                encodeURI(\"../public/images/\" + item.dogimageref);\r\n                            }\r\n                            let age = item.dogage;\r\n                            if(Number(item.dogage) <1)\r\n                            {\r\n                                age = \"<1\"\r\n                            }\r\n                            return (\r\n                                <div key={item.dogid} className=\"dog-card mb-5\" style={style(item.order)}>\r\n                                    <div>\r\n                                        <img src={dogImage} alt={item.dogname + \"'s profile photo\"} />\r\n                                        <div className=\"mt-3\">\r\n                                            <div><strong>{item.dogname}</strong></div>\r\n                                            <div>{item.doglocation}</div>\r\n                                            <div>{age} year old {item.doggender} {item.dogbreed}</div>\r\n                                            <Link to={\"/dogs/details/\" + item.dogid}>Details &#8594;</Link>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    <div className=\"right pb-5\">\r\n                        <Link to=\"/dogs\"><button className=\"btn btn-success\">See All Dogs</button></Link>\r\n                    </div>\r\n                </div>\r\n            )\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"home-content-holder\">\r\n                <div className=\"center pb-5\">\r\n                    <h1 style={{ textAlign: \"center\" }}>Find Your Next Furry Friend</h1>\r\n                </div>\r\n                <div className=\"home-image-holder mb-4\">\r\n                    <img className=\"img-responsive\" id=\"dog-one\" src=\"dog2.jpg\" alt=\"a nice dog\" />\r\n                    <img className=\"img-responsive\" id=\"dog-two\" src=\"dog1.jpg\" alt=\"another nice dog\" />\r\n                    <img className=\"img-responsive\" id=\"dog-three\" src=\"dog3.jpg\" alt=\"a third nice dog\" />\r\n                </div>\r\n                <div className=\"center\" style={{ textAlign: \"center\" }}>\r\n                    <p>Owning a dog can be one of the most rewarding experiences someone can have. All around the GTA, many dogs are looking for homes to call their own.\r\n                    here at Dog Website, we want to clear shelters and fill people's live with the joy of having a dog.\r\n                    </p>\r\n                    <p>Dog Website is an organization dedicated to connecting shelters and private dog fosterers in the GTA with anyone interested in adopting a new dog.\r\n                    Please browse all the pets we have available, and we hope you find a new friend!\r\n                    </p>\r\n                    <h2>Our Newest Dogs:</h2>\r\n                </div>\r\n                {this.state.dogHolder}\r\n            </div>\r\n        );\r\n    }\r\n}","//import React\r\nimport React from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\n\r\nexport class Details extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            isAdmin: parseInt(this.props.isAdmin),\r\n            pageContent: (<div class=\"spinner-border text-success\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n            </div>),\r\n            name: '',\r\n            breed: '',\r\n            gender: 'Male',\r\n            age: '',\r\n            weight: '',\r\n            color: '',\r\n            description: '',\r\n            location: '',\r\n            //imageref: ''\r\n            imageSource: encodeURI(\"../../public/images/default.jpg\"),\r\n            show: false, //whether or not the modal is showing\r\n            deleteButtonHolder: '',\r\n            redirectHolder: '',\r\n\r\n            commandPanel: '' //stores the html for the panel that confirms if something was just added or updated\r\n        }\r\n\r\n        this.handleShow = this.handleShow.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        if (urlParams.get('cmd') != null) {\r\n            if (urlParams.get('cmd') === \"added\") {\r\n                this.setState({ commandPanel: <div className=\"alert alert-success\" role=\"alert\">Dog was successfully added!</div> });\r\n            }\r\n            if (urlParams.get('cmd') === \"updated\") {\r\n                this.setState({ commandPanel: <div className=\"alert alert-info\" role=\"alert\">Dog was successfully updated!</div> });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        console.log(\"Dog Details Page received new props!\");\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.isAdmin !== prevProps.isAdmin) {\r\n            console.log(\"The new prop was different from the old one - new isAdmin: \" + this.props.isAdmin)\r\n            this.setState({ isAdmin: parseInt(this.props.isAdmin) });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('/api/dogs/' + this.state.id)\r\n            .then(res =>\r\n                res.json()\r\n            )\r\n            .then((result) => {\r\n                //if an empty object was returned\r\n                if (typeof result[0] == \"undefined\") {\r\n                    console.log(\"result is null\")\r\n                    this.setState({\r\n                        pageContent: <div>\r\n                            <p>No entry with that ID found!</p>\r\n                            <Link to=\"\"><p>Home</p></Link>\r\n                        </div>\r\n                    });\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        name: result[0].dogname,\r\n                        breed: result[0].dogbreed,\r\n                        gender: result[0].doggender,\r\n                        age: result[0].dogage,\r\n                        weight: result[0].dogweight,\r\n                        color: result[0].dogcolor,\r\n                        description: result[0].dogdescription,\r\n                        location: result[0].doglocation\r\n                    });\r\n                    if (Number(result[0].dogage) < 1) {\r\n                        this.setState({ age: \"<1\" });\r\n                    }\r\n                    if (result[0].dogimageref !== null && result[0].dogimageref !== \"\") {\r\n                        //if the dog has a reference image, use it\r\n                        console.log(\"dog image ref found - \" + result[0].dogimageref);\r\n                        this.setState({ imageSource: encodeURI(\"../../public/images/\" + result[0].dogimageref) });\r\n                    }\r\n                    //setting the content of the page\r\n                    this.setState({\r\n                        pageContent: (\r\n                            <div className=\"container\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"details-image-column col-sm\">\r\n                                        <div>\r\n                                            <img src={this.state.imageSource} className=\"details-image\" alt=\"dog profile picture\" />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"details-info-column col-sm\">\r\n                                        <h2>{this.state.name}</h2>\r\n                                        <div><strong>Gender: </strong>{this.state.gender}</div>\r\n                                        <div><strong>Location: </strong>{this.state.location}</div>\r\n                                        <div><strong>Breed: </strong>{this.state.breed}</div>\r\n                                        <div><strong>Age: </strong>{this.state.age} year(s) old</div>\r\n                                        <div><strong>Weight (lbs): </strong>{this.state.weight}</div>\r\n                                        <div><strong>Color: </strong>{this.state.color}</div>\r\n                                        <br />\r\n                                        <div className=\"mb-3\">{this.state.description}</div>\r\n\r\n                                        {this.checkIfAdmin()}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            }).catch(function (err) {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n\r\n\r\n    //prints the update and delete buttons if admin\r\n    checkIfAdmin() {\r\n        console.log(\"is user admin - \" + this.state.isAdmin);\r\n        if (this.state.isAdmin === 1) {\r\n            console.log(\"user is admin!\");\r\n            this.setState({\r\n                deleteButtonHolder: <button className=\"btn btn-danger\" onClick={() => { this.handleDelete(this.state.id) }}>\r\n                    Delete\r\n        </button>\r\n            });\r\n            return (<div>\r\n                <Link to={\"/dogs/update/\" + this.state.id}><button className=\"btn btn-warning\">Update</button></Link>\r\n                <Link to={\"/dogs/changeimage/\" + this.state.id}><button className=\"btn btn-info\">Change Image</button></Link>\r\n                <button className=\"btn btn-danger\" onClick={this.handleShow}>Delete</button>\r\n\r\n\r\n\r\n            </div>);\r\n        }\r\n        else return '';\r\n    }\r\n\r\n\r\n    handleDelete(id) {\r\n        //TODO: this should be put in details once that is done\r\n        this.setState({\r\n            tableHolder: (<div class=\"spinner-border text-success\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n            </div>)\r\n        });\r\n        console.log(\"deleting dog with id \" + id);\r\n        fetch(\"/api/dogs/delete/\" + id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + this.props.jwtToken\r\n            }\r\n        }).then(function (response) {\r\n            if (response.status === 403) {\r\n                //token is expired, sign out and redirect to login form\r\n                this.props.signOut();\r\n                this.setState({ redirectToLogin: true });\r\n                throw new Error(\"Bad response from server: token expired\");\r\n            }\r\n            if (response.status >= 400) {\r\n                this.setState({ commandMessage: <div>Database error - sorry!</div> });\r\n                throw new Error(\"Bad response from server\");\r\n            }\r\n            console.log(response);\r\n        }).then(() => {\r\n            console.log(\"successfully deleted dog with id: \" + id);\r\n            this.setState({ redirectHolder: <Redirect to={\"/dogs?cmd=deleted\"} /> });\r\n            this.getList();\r\n        })\r\n            .catch(function (err) {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n\r\n    //MODAL METHODS\r\n    handleClose() {\r\n        console.log(\"hiding modal...\");\r\n        this.setState({ show: false });\r\n    }\r\n\r\n    handleShow() {\r\n        console.log(\"showing modal...\");\r\n        this.setState({ show: true });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.redirectHolder}\r\n                <Link to=\"/dogs\"><button className=\"btn btn-sm btn-light\">&larr; Go Back</button></Link>\r\n                {this.state.commandPanel}\r\n                <h2>Details</h2>\r\n                {this.state.pageContent}\r\n                {/*<!-- Modal --> https://bit.dev/react-bootstrap/react-bootstrap/modal*/}\r\n                <Modal show={this.state.show} onHide={this.handleClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title></Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>Are you sure you want to delete this Dog from the database?</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <button className=\"btn btn-light\" onClick={this.handleClose}>\r\n                            Close\r\n                        </button>\r\n                        {this.state.deleteButtonHolder}\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\n//let tableHolder = <div>Loading...</div>;\r\n\r\n\r\nexport class List extends React.Component {\r\n\r\n    //source https://dev.to/nburgess/creating-a-react-app-with-react-router-and-an-express-backend-33l3\r\n    // Initialize the state\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isAdmin: parseInt(this.props.isAdmin),\r\n            list: [],\r\n            commandMessage: '',\r\n            tableHolder: (\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <div className=\"spinner-border text-success\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n            ),\r\n            redirectHolder: '',\r\n\r\n            currentlySelectedDogs: [],\r\n\r\n            currentPage: 1,\r\n            pageCount: 1,\r\n            pageLinks: [],\r\n            elementsPerPage: 8\r\n        }\r\n        this.checkIfAdmin = this.checkIfAdmin.bind(this);\r\n        this.redirect = this.redirect.bind(this);\r\n        this.initialDrawCards = this.initialDrawCards.bind(this);\r\n        this.drawPageButtons = this.drawPageButtons.bind(this);\r\n    }\r\n\r\n    //prints the add button if admin\r\n    checkIfAdmin() {\r\n        console.log(\"is user admin - \" + this.state.isAdmin);\r\n        if (this.state.isAdmin === 1) {\r\n            console.log(\"user is admin!\");\r\n            return <Link to={\"/dogs/add\"}><button className=\"btn btn-success\">Add New Dog</button></Link>;\r\n        }\r\n        else return '';\r\n    }\r\n\r\n    //will call whenever new props are received\r\n    componentDidUpdate(prevProps) {\r\n        console.log(\"Dog List Page updated and received new props!\");\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.isAdmin !== prevProps.isAdmin) {\r\n            console.log(\"The new prop was different from the old one - new isAdmin: \" + this.props.isAdmin)\r\n            this.setState({ isAdmin: parseInt(this.props.isAdmin) });\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n\r\n        //checking if there are any command messages in the url params\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        if (urlParams.get('cmd') != null) {\r\n            if (urlParams.get('cmd') === \"deleted\") {\r\n                this.setState({ commandMessage: <div className=\"alert alert-danger\" role=\"alert\">Dog was successfully deleted.</div> });\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    // Fetch the list on first mount\r\n    componentDidMount() {\r\n        this.getList();\r\n    }\r\n\r\n    //deleting the command message when the page is changed\r\n    componentWillUnmount() {\r\n        this.setState({ commandMessage: \"\" });\r\n        console.log(\"Debug: list page is unmounting!\");\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    getList = () => {\r\n        //set timeout emulates the browser loading\r\n        //setTimeout(() => {\r\n        fetch('/api/dogs/list')\r\n            .then(res => res.json())\r\n            .then(list => this.setState({ list: list }))\r\n            .then(() => {\r\n\r\n                //setting the number of pages - the length of the list divided by the elements per page, then rounded up\r\n                let numberOfPages = Math.ceil(this.state.list.length / this.state.elementsPerPage);\r\n                console.log(\"number of pages: \" + numberOfPages);\r\n                this.setState({ pageCount: numberOfPages });\r\n\r\n            })\r\n            .then(() => {\r\n                //put the dog entries in page elements\r\n                console.log(\"URL page number param = \" + this.props.match.params.page);\r\n                this.initialDrawCards(1);\r\n            });\r\n        //}, 1000);\r\n    }\r\n\r\n    /**\r\n     * Draws the cards to the page based on the current page number in the url\r\n     */\r\n    initialDrawCards() {\r\n        let currentPage = this.props.match.params.page;\r\n        let dogListIndex = 0;\r\n        if (currentPage !== 1 && currentPage !== undefined) {\r\n            dogListIndex = (currentPage - 1) * this.state.elementsPerPage;\r\n        }\r\n        const dogSubList = this.state.list.slice(dogListIndex, dogListIndex + this.state.elementsPerPage);\r\n        this.setState({\r\n            currentlySelectedDogs: dogSubList,\r\n        });\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Draws the pagination number buttons, and sets which one is currently active\r\n     * @param {Number} numberOfPages \r\n     */\r\n    drawPageButtons() {\r\n        let pageLinkElements = [];\r\n        for (var i = 1; i <= this.state.pageCount; i++) {\r\n            if (Number(this.props.match.params.page) === i || ((this.props.match.params.page === undefined) && i === 1)) {\r\n                pageLinkElements.push(<li className=\"page-item active\"><Link onClick={this.redrawCards} className=\"page-link\" to={'/dogs/' + i}>{i}</Link></li>);\r\n            }\r\n            else {\r\n                pageLinkElements.push(<li className=\"page-item\"><Link onClick={this.redrawCards} className=\"page-link \" to={'/dogs/' + i}>{i}</Link></li>);\r\n            }\r\n        }\r\n        return pageLinkElements;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Not actually a test, runs every render and draws dog cards to the screen based on the current page number in the URL\r\n     * @param {int} currentPage \r\n     */\r\n    testDrawCard(currentPage) {\r\n\r\n        //dont draw anything until the holder is filled with db data\r\n        if (this.state.list.length === 0) {\r\n            return this.state.tableHolder;\r\n        }\r\n\r\n        let modCurrentPage = currentPage;\r\n\r\n\r\n\r\n        //grab new cards based on url, and draw them\r\n        let dogListIndex = 0;\r\n        //if one page one or no page given, set the index to count the first 8 dogs\r\n        if (currentPage !== 1 && currentPage !== undefined) {\r\n            dogListIndex = (currentPage - 1) * this.state.elementsPerPage;\r\n        }\r\n        else {\r\n            modCurrentPage = 1;\r\n        }\r\n        //create a sublist based on the current page and amount of cards allowed per page\r\n        const dogSubList = this.state.list.slice(dogListIndex, dogListIndex + this.state.elementsPerPage);\r\n        let delay = 0;\r\n        dogSubList.forEach(element => {\r\n            element.order = delay;\r\n            delay += 0.1;\r\n        });\r\n\r\n        //creates a custom style based on the given delay (in seconds)\r\n        function style(delay) {\r\n            return {\r\n                animationName: 'cardAppear',\r\n                animationTimingFunction: 'ease-in-out',\r\n                animationDuration: '0.3s',\r\n                animationDelay: delay + 's',\r\n                animationIterationCount: 1,\r\n                animationDirection: 'normal',\r\n                animationFillMode: 'forwards'\r\n            }\r\n        };\r\n\r\n\r\n        if (dogSubList.length !== 0) {\r\n            //this.disappearCards();\r\n            return (\r\n                <div>\r\n                    <nav aria-label=\"Page navigation\">\r\n                        <ul className=\"pagination justify-content-center\">\r\n                            <li className=\"page-item\">\r\n                                <Link className=\"page-link\" to={\r\n                                    () => {\r\n                                        if (Number(modCurrentPage) > 1) {\r\n                                            return \"/dogs/\" + (Number(modCurrentPage) - 1)\r\n                                        }\r\n                                    }\r\n                                }>&larr;</Link>\r\n                            </li>\r\n                            {this.drawPageButtons()}\r\n                            <li className=\"page-item\">\r\n                                <Link className=\"page-link\" to={\r\n                                    () => {\r\n                                        if (Number(modCurrentPage) < this.state.pageCount) {\r\n                                            return \"/dogs/\" + (Number(modCurrentPage) + 1)\r\n                                        }\r\n                                    }\r\n\r\n                                    //\"/dogs/\" + this.clampPage((Number(this.props.match.params.page) + 1), Number(this.state.pageCount))}\r\n                                }>&rarr;</Link>\r\n\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                    <div className=\"list-card-holder\">\r\n                        {dogSubList.map((item) => {\r\n                            let dogImage = encodeURI(\"../public/images/default.jpg\");\r\n                            if (item.dogimageref !== \"\" && item.dogimageref !== null) {\r\n                                dogImage = encodeURI(\"../public/images/\" + String(item.dogimageref))\r\n                            }\r\n                            let age = item.dogage;\r\n                            if (Number(item.dogage) < 1) {\r\n                                age = \"<1\"\r\n                            }\r\n                            return (\r\n\r\n                                <div key={item.dogid} className=\"dog-card mb-5\" style={style(item.order)}>\r\n\r\n                                    <div>\r\n                                        <img src={dogImage} alt={item.dogname + \"'s profile photo\"} />\r\n                                        <div className=\"mt-3\">\r\n                                            <div><strong>{item.dogname}</strong></div>\r\n                                            <div>{item.doglocation}</div>\r\n                                            <div>{age} year old {item.doggender} {item.dogbreed}</div>\r\n                                            <Link to={\"/dogs/details/\" + item.dogid}>Details &#8594;</Link>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    makeCardsAppear() {\r\n        let cards = document.getElementsByClassName(\"dog-card\");\r\n        for (var i = 0; i < cards.length; i++) {\r\n            cards.style.color = \"blue\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes cards on screen disappear - TODO: have cards disppear on page change\r\n     */\r\n    disappearCards() {\r\n        let existingCards = document.getElementsByClassName(\"dog-card\");\r\n        for (let element of existingCards) {\r\n            element.setAttribute(\"color\", \"blue\")\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    redirect(id) {\r\n        this.setState({ redirectHolder: <Redirect to={this.props.match.path + \"/dogs/details/\" + id} /> });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        let cards = this.state.tableHolder\r\n        if (this.state.redirectToLogin === true) {\r\n            return <Redirect to='/signin' />;\r\n        }\r\n        else\r\n            return (\r\n                <div>\r\n                    {this.state.redirectHolder}\r\n                    <h1>Dogs</h1>\r\n                    {this.state.commandMessage}\r\n                    <p>Here is a list of all the dogs currently available.</p>\r\n                    {this.checkIfAdmin()}\r\n\r\n                    {this.testDrawCard(this.props.match.params.page)}\r\n\r\n\r\n\r\n                </div>\r\n            );\r\n    }\r\n\r\n   \r\n}","import React from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\nlet errorMessage = \"\";\r\n\r\nexport class Add extends React.Component {\r\n    constructor(props) {\r\n        //setting the state of this SignIn component to have username and password variables, which are empty by default and change whenever the input values change\r\n        //the proper way to handle forms in react is save every form element as a state variable, change the states on input change, and handle validation on a onSubmit function\r\n        super(props);\r\n        this.state = {\r\n            userIsAdmin: parseInt(this.props.isAdmin),\r\n            name: '',\r\n            breed: '',\r\n            gender: 'Male',\r\n            age: '',\r\n            weight: '',\r\n            color: '',\r\n            description: '',\r\n            location: '',\r\n            //imageref: '',\r\n            redirectToDetails: '',\r\n            redirectToLogin: false,\r\n            errorMessage: errorMessage\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.successMessage = this.successMessage.bind(this);\r\n        this.failureMessage = this.failureMessage.bind(this);\r\n\r\n    }\r\n\r\n    //check if an admin is signed in on page load\r\n    checkIfSignedIn() {\r\n        if (this.state.userIsAdmin === 0) {\r\n            //redirect if admin isnt signed in\r\n            this.setState({ redirectToList: true });\r\n        }\r\n    }\r\n\r\n    //will call whenever new props are received\r\n    componentDidUpdate(prevProps) {\r\n        console.log(\"Add Page received new props!\");\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.isAdmin !== prevProps.isAdmin) {\r\n            console.log(\"The new prop was different from the old one - new isAdmin: \" + this.props.username)\r\n            this.setState({ userIsAdmin: parseInt(this.props.isAdmin) });\r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n   \r\n    //called when there is an error adding data to the database\r\n    failureMessage(err) {\r\n        console.log(\"Error adding to the database\");\r\n        this.setState({ errorMessage: \"Error adding to the database - sorry!\" });\r\n        console.log(err);\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (!e.target.checkValidity()) {\r\n            //form is not valid, required fields are empty\r\n            console.log(\"form invalid\");\r\n            this.setState({ errorMessage: \"*Please fill all fields\" });\r\n\r\n            return;\r\n\r\n        }\r\n        else {\r\n            console.log(\"form valid!\");\r\n            console.log(this.state);\r\n            //source https://medium.com/@avanthikameenakshi/crud-react-express-99025f03f06e\r\n            let data = {\r\n                name: this.state.name,\r\n                breed: this.state.breed,\r\n                gender: this.state.gender,\r\n                age: this.state.age,\r\n                weight: this.state.weight,\r\n                color: this.state.color,\r\n                description: this.state.description,\r\n                location: this.state.location\r\n            }\r\n            console.log(\"sending this data to the server...\");\r\n            console.log(data)\r\n            fetch(\"/api/dogs/add\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + this.props.jwtToken\r\n                },\r\n                body: JSON.stringify(data)\r\n            }).then(function (response) {\r\n                if (response.status === 403) {\r\n                    //token is expired, sign out and redirect to login form\r\n                    console.log(\"403 - resquest sent with an expired token\");\r\n                    this.props.signOut();\r\n                    this.setState({redirectToLogin: true});\r\n                    throw new Error(\"Bad response from server: token expired\");\r\n                }\r\n                if (response.status >= 400) {\r\n                    throw new Error(\"Bad response from server\");\r\n                }\r\n                console.log(\"printing server response...\");\r\n                console.log(response);\r\n                console.log(response.body);\r\n                return response.json();\r\n            }).then(data => this.successMessage(data))\r\n                .catch(function (err) {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n     //called when data is successfully added to the database\r\n     successMessage(data) {\r\n        console.log(\"printing parsed data...\");\r\n        console.log(data);\r\n        console.log(\"Dog successfully added to database\");\r\n        //TODO: redirect to this dogs details page\r\n        this.setState({ errorMessage: \"Successfully added to the database\", redirectToDetails: <Redirect to={\"/dogs/details/\"+ data.id + \"?cmd=added\"} /> });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        if(this.state.redirectToLogin === true) {\r\n            return <Redirect to='/signin' />\r\n        }\r\n\r\n        \r\n        { this.checkIfSignedIn() }\r\n        return (\r\n            <div>\r\n                {this.state.redirectToDetails}\r\n                <h2>Add New Dog</h2>\r\n                <form className=\"dog-form\" action=\"\" onSubmit={this.handleSubmit} noValidate>\r\n                    <div style={{ color: \"red\" }} id=\"errorMessage\">{this.state.errorMessage}</div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"name\">Name: <span className=\"text-danger\">*</span> </label>\r\n                        <input className=\"form-control\" type=\"text\" name=\"name\" id=\"name\" value={this.state.name} onChange={this.handleChange} required />\r\n                        <span id=\"nameError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"breed\">Breed: <span className=\"text-danger\">*</span></label>\r\n                        <input className=\"form-control\" type=\"text\" name=\"breed\" id=\"breed\" value={this.state.breed} onChange={this.handleChange} required />\r\n                        <span id=\"breedError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n\r\n                        <label htmlFor=\"gender\">Gender: <span className=\"text-danger\">*</span></label> <br />\r\n                        <div className=\"form-check\">\r\n                            <input className=\"form-check-input\" type=\"radio\" id=\"male\" name=\"gender\" value=\"Male\" onChange={this.handleChange} checked />\r\n                            <label className=\"form-check-label\" htmlFor=\"male\">Male</label>\r\n                        </div>\r\n                        <div className=\"form-check\">\r\n                            <input className=\"form-check-input\" type=\"radio\" id=\"female\" name=\"gender\" onChange={this.handleChange} value=\"Female\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"female\">Female</label><br />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"age\">Age (in years): <span className=\"text-danger\">*</span></label>\r\n                        <input className=\"form-control\" type=\"number\" name=\"age\" id=\"age\" value={this.state.age} onChange={this.handleChange} required />\r\n                        <span id=\"ageError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"weight\">Weight (lbs): <span className=\"text-danger\">*</span></label>\r\n                        <input className=\"form-control\" type=\"number\" name=\"weight\" id=\"weight\" step=\"0.01\" value={this.state.weight} onChange={this.handleChange} required />\r\n                        <span id=\"weightError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"color\">Color: <span className=\"text-danger\">*</span></label>\r\n                        <input className=\"form-control\" type=\"text\" name=\"color\" id=\"color\" value={this.state.color} onChange={this.handleChange} required />\r\n                        <span id=\"colorError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"location\">Location: <span className=\"text-danger\">*</span></label>\r\n                        <input className=\"form-control\" type=\"text\" name=\"location\" id=\"location\" value={this.state.location} onChange={this.handleChange} required />\r\n                        <span id=\"locationError\"></span>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"description\">Description: </label>\r\n                        <textarea className=\"form-control\" name=\"description\" id=\"description\" onChange={this.handleChange} rows=\"4\" value={this.state.description}></textarea>\r\n                        <span id=\"descriptionError\"></span>\r\n                    </div>\r\n                    <Link to=\"/dogs\"><button className=\"btn btn-light\" type=\"submit\">Cancel</button></Link>\r\n                    <button className=\"btn btn-primary\" type=\"submit\">Add Dog</button>\r\n                </form>\r\n\r\n            </div >\r\n        );\r\n    };\r\n}","import React from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\nlet errorMessage = \"\";\r\n\r\nexport class Update extends React.Component {\r\n    constructor(props) {\r\n        //setting the state of this SignIn component to have username and password variables, which are empty by default and change whenever the input values change\r\n        //the proper way to handle forms in react is save every form element as a state variable, change the states on input change, and handle validation on a onSubmit function\r\n        super(props);\r\n        this.state = {\r\n            isAdmin: parseInt(this.props.isAdmin),\r\n            id: '',\r\n            name: '',\r\n            breed: '',\r\n            gender: 'Male',\r\n            age: '',\r\n            weight: '',\r\n            color: '',\r\n            description: '',\r\n            location: '',\r\n            //imageref: '',\r\n            redirectToList: false,\r\n            redirectToLogin: false,\r\n            errorMessage: errorMessage,\r\n            pageContent: (<div>\r\n                <h1>Update Dog</h1>\r\n                <p>Loading...</p>\r\n            </div>\r\n            ),\r\n            loadForm: false,\r\n            validId: true,\r\n            maleCheck: \"\",\r\n            femaleCheck: \"\",\r\n            uploadedImage: null //holds the uploaded image file\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.successMessage = this.successMessage.bind(this);\r\n        this.failureMessage = this.failureMessage.bind(this);\r\n        this.checkIfSignedIn = this.checkIfSignedIn.bind(this);\r\n        this.handleImageUpload = this.handleImageUpload.bind(this);\r\n\r\n    }\r\n\r\n    //check if an admin is signed in on page load\r\n    checkIfSignedIn() {\r\n        if (this.state.isAdmin === 0) {\r\n            //redirect if admin isnt signed in\r\n            this.setState({ redirectToList: true });\r\n        }\r\n    }\r\n\r\n    //will call whenever new props are received\r\n    componentDidUpdate(prevProps) {\r\n        console.log(\"Update Page received new props!\");\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.isAdmin !== prevProps.isAdmin) {\r\n            console.log(\"The new prop was different from the old one - new isAdmin: \" + this.props.username)\r\n            this.setState({ userIsAdmin: parseInt(this.props.isAdmin) });\r\n        }\r\n    }\r\n\r\n    //check if a valid id is present before loading page\r\n    componentWillMount() {\r\n        this.checkIfSignedIn();\r\n        const queryString = window.location.pathname;\r\n        var id = queryString.substring(queryString.lastIndexOf('/') + 1);\r\n\r\n        //if invalid id, redirect to the page\r\n        if (id === null || isNaN(id) || id === 0) {\r\n            this.setState({\r\n                validId: false,\r\n                pageContent: (<div>\r\n                    <Redirect to='/dogs' />\r\n                    <h1>Update Dog</h1>\r\n                    <p>Sorry! Invalid ID</p>\r\n                </div>\r\n                )\r\n            });\r\n            //redirect to list if page is invalid\r\n            return;\r\n        }\r\n        this.setState({\r\n            id: id\r\n        });\r\n    }\r\n\r\n    //grab the entry with the given id from the database after the \r\n    componentDidMount() {\r\n        if (this.state.validId !== true) {\r\n            //dont bother loading the form if the id is invalid\r\n            return;\r\n        }\r\n        //grab the id's content and set the state\r\n        fetch('/api/dogs/' + this.state.id)\r\n            .then(res =>\r\n                res.json()\r\n            )\r\n            .then((result) => {\r\n                //if an empty object was returned\r\n                if (typeof result[0] == \"undefined\") {\r\n                    console.log(\"result is null\")\r\n                    this.setState({\r\n                        pageContent: <div>\r\n                            <p>No entry with that ID found!</p>\r\n                            <Link to=\"\"><p>Home</p></Link>\r\n                        </div>\r\n                    });\r\n                }\r\n                else {\r\n\r\n                    console.log(result[0]);\r\n                    this.setState({\r\n                        name: result[0].dogname,\r\n                        breed: result[0].dogbreed,\r\n                        gender: result[0].doggender,\r\n                        age: result[0].dogage,\r\n                        weight: result[0].dogweight,\r\n                        color: result[0].dogcolor,\r\n                        description: result[0].dogdescription,\r\n                        location: result[0].doglocation,\r\n                        loadForm: true\r\n                    });\r\n                    console.log(this.state.name);\r\n                    if (this.state.gender === \"Male\") {\r\n                        //TODO: fix this system for the check because you need to click it twice to actually change\r\n                        this.setState({\r\n                            maleCheck: <input type=\"radio\" id=\"male\" name=\"gender\" value=\"Male\" onChange={this.handleChange} checked />,\r\n                            femaleCheck: <input type=\"radio\" id=\"female\" name=\"gender\" onChange={this.handleChange} value=\"Female\" />\r\n                        });\r\n\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            maleCheck: <input type=\"radio\" id=\"male\" name=\"gender\" value=\"Male\" onChange={this.handleChange} />,\r\n                            femaleCheck: <input type=\"radio\" id=\"female\" name=\"gender\" onChange={this.handleChange} value=\"Female\" checked />\r\n                        });\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n        this.setState({\r\n            pageContent: ''\r\n        });\r\n    }\r\n\r\n    handleChange(e) {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n    //called when data is successfully added to the database\r\n    successMessage(data) {\r\n        console.log(data);\r\n        this.setState({ errorMessage: \"Successfully added to the database\", redirectToList: true });\r\n        if (data === \"success\") {\r\n            console.log(\"data successfully sent to server\");\r\n        }\r\n    }\r\n    //called when there is an error adding data to the database\r\n    failureMessage(err) {\r\n        console.log(\"Error adding to the database\");\r\n        this.setState({ errorMessage: \"Error adding to the database - sorry!\" });\r\n        console.log(err);\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (!e.target.checkValidity()) {\r\n            //form is not valid, required fields are empty\r\n            console.log(\"form invalid\");\r\n            this.setState({ errorMessage: \"*Please fill all fields\" });\r\n\r\n            return;\r\n\r\n        }\r\n        else {\r\n            console.log(\"form valid!\");\r\n            console.log(this.state);\r\n            //source https://medium.com/@avanthikameenakshi/crud-react-express-99025f03f06e\r\n            let data = {\r\n                id: this.state.id,\r\n                name: this.state.name,\r\n                breed: this.state.breed,\r\n                gender: this.state.gender,\r\n                age: this.state.age,\r\n                weight: this.state.weight,\r\n                color: this.state.color,\r\n                description: this.state.description,\r\n                location: this.state.location\r\n            }\r\n            console.log(data)\r\n            fetch(\"/api/dogs/update/\" + this.state.id, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + this.props.jwtToken\r\n                },\r\n                body: JSON.stringify(data)\r\n            }).then(function (response) {\r\n                if (response.status === 403) {\r\n                    //token is expired, sign out and redirect to login form\r\n                    this.props.signOut();\r\n                    this.setState({ redirectToLogin: true });\r\n                    throw new Error(\"Bad response from server: token expired\");\r\n                }\r\n                if (response.status >= 400) {\r\n                    throw new Error(\"Bad response from server\");\r\n                    //TODO: redirect to an error page - currently still says it submits successfully on the front end\r\n                }\r\n                console.log(response);\r\n            }).then(this.successMessage(data))\r\n                .catch(function (err) {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * stores the image file to the state variable when an image is uploaded\r\n     * @param {*} event \r\n     */\r\n    handleImageUpload(event) {\r\n        console.log(event.target.files[0]);\r\n        this.setState({ uploadedImage: event.target.files[0] });\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.redirectToLogin === true) {\r\n            return <Redirect to='/signin' />\r\n        }\r\n        if (this.state.redirectToList === true) {\r\n            return <Redirect to={'/dogs/details/' + this.state.id + '?cmd=updated'} />\r\n        }\r\n        if (this.state.loadForm === true) {\r\n            return (<div>\r\n                <h2>Update Dog</h2>\r\n                <form className=\"dog-form\" action=\"\" onSubmit={this.handleSubmit} noValidate encType=\"multipart/form-data\" >\r\n                    <div style={{ color: \"red\" }} id=\"errorMessage\">{this.state.errorMessage}</div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"name\">Name: <span className=\"text-danger\">*</span></label>\r\n                        <input className=\"form-control\" type=\"text\" name=\"name\" id=\"name\" value={this.state.name} onChange={this.handleChange} required />\r\n                        <span id=\"nameError\"></span>\r\n                    </div>\r\n                    <div>File upload will go here</div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"breed\">Breed: <span className=\"text-danger\">*</span></label>\r\n                        <input className=\"form-control\" type=\"text\" name=\"breed\" id=\"breed\" value={this.state.breed} onChange={this.handleChange} required />\r\n                        <span id=\"breedError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"gender\">Gender: <span className=\"text-danger\">*</span></label> <br />\r\n                        {this.state.maleCheck}\r\n                        <label htmlFor=\"male\">Male</label><br />\r\n                        {this.state.femaleCheck}\r\n                        <label htmlFor=\"female\">Female</label><br />\r\n                        <span id=\"nameError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"age\">Age (in years): <span className=\"text-danger\">*</span></label>\r\n                        <input className=\"form-control\" type=\"number\" name=\"age\" id=\"age\" value={this.state.age} onChange={this.handleChange} required />\r\n                        <span id=\"ageError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"weight\">Weight (lbs): <span className=\"text-danger\">*</span></label>\r\n                        <input className=\"form-control\" type=\"number\" name=\"weight\" id=\"weight\" step=\"0.01\" value={this.state.weight} onChange={this.handleChange} required />\r\n                        <span id=\"weightError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"color\">Color: <span className=\"text-danger\">*</span></label>\r\n                        <input className=\"form-control\" type=\"text\" name=\"color\" id=\"color\" value={this.state.color} onChange={this.handleChange} required />\r\n                        <span id=\"colorError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"location\">Location: <span className=\"text-danger\">*</span></label>\r\n                        <input className=\"form-control\" type=\"text\" name=\"location\" id=\"location\" value={this.state.location} onChange={this.handleChange} required />\r\n                        <span id=\"locationError\"></span>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"description\">Description: </label>\r\n                        <textarea className=\"form-control\" name=\"description\" id=\"description\" onChange={this.handleChange} rows=\"4\" value={this.state.description}></textarea>\r\n                        <span id=\"descriptionError\"></span>\r\n                    </div>\r\n                    <Link to={\"/dogs/details/\" + this.state.id}><button className=\"btn btn-light\">Cancel</button></Link>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Update Dog</button>\r\n\r\n                </form>\r\n\r\n\r\n            </div>);\r\n        }\r\n        else return (\r\n            <div>\r\n                <h2>Update Dog</h2>\r\n                <p>Loading...</p>\r\n            </div>\r\n        );\r\n    };\r\n}","import React from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\nexport class ChangeImage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userIsAdmin: parseInt(this.props.isAdmin),\r\n\r\n            errorMessage: \"\",\r\n            isAdmin: parseInt(this.props.isAdmin),\r\n            id: this.props.match.params.id,\r\n            uploadedImage: null,\r\n            imageSource: encodeURI(\"../../public/images/default.jpg\"),\r\n\r\n            redirectToDetails: '',\r\n            pageContent: <div>Loading...</div>\r\n        }\r\n        this.handleImageUpload = this.handleImageUpload.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.checkIfSignedIn = this.checkIfSignedIn.bind(this);\r\n    }\r\n\r\n    //check if an admin is signed in on page load\r\n    checkIfSignedIn() {\r\n        if (this.state.userIsAdmin === 0) {\r\n            //redirect if admin isnt signed in\r\n            this.setState({ redirectToDetails: <Redirect to={\"/dogs/details/\" + this.state.id} /> });\r\n        }\r\n    }\r\n\r\n    //will call whenever new props are received\r\n    componentDidUpdate(prevProps) {\r\n        console.log(\"Add Page received new props!\");\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.isAdmin !== prevProps.isAdmin) {\r\n            console.log(\"The new prop was different from the old one - new isAdmin: \" + this.props.username)\r\n            this.setState({ userIsAdmin: parseInt(this.props.isAdmin) });\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Validates the file that was just selected by the file input.\r\n     * If correct size and file type, stores the image file to the state variable when an image is uploaded\r\n     * @param {*} event \r\n     */\r\n    handleImageUpload(event) {\r\n        console.log(\"file size - \" + event.target.files[0].size + \". megabytes - \" + event.target.files[0].size / 1000000);\r\n\r\n        //IMAGE VALIDATION\r\n        //source - https://www.codexworld.com/file-type-extension-validation-javascript/ \r\n        var allowedExtensions = /(\\.jpg|\\.jpeg|\\.png|\\.gif)$/i;\r\n        if (!allowedExtensions.exec(event.target.files[0].name)) {\r\n            console.log(\"An invalid file type tried to be uploaded - \" + event.target.files[0].name);\r\n            this.setState({ errorMessage: 'Invalid filetype: jpg, jpeg, png, or gif only.' });\r\n        }\r\n        else if (event.target.files[0].size / 1000000 > 2.5) {\r\n            console.log(\"Filesize > 2.5 mb - too large.\");\r\n            this.setState({ errorMessage: 'File size too large. Must be smaller than 2.5mb. Your file is approx. ' + event.target.files[0].size / 1000000 + \"mb\" });\r\n        }\r\n        else { //correct file type and file size. Save to local storage.\r\n            this.setState({\r\n                uploadedImage: event.target.files[0],\r\n                imageSource: window.URL.createObjectURL(event.target.files[0]),\r\n                errorMessage: ''\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        //get existing dog image\r\n        fetch('/api/dogs/' + this.state.id)\r\n            .then(res =>\r\n                res.json()\r\n            )\r\n            .then((result) => {\r\n                //if an empty object was returned\r\n                if (typeof result[0] == \"undefined\") {\r\n                    console.log(\"result is null\")\r\n                    this.setState({\r\n                        pageContent: <div>\r\n                            <p>No entry with that ID found!</p>\r\n                            <Link to=\"\"><p>Home</p></Link>\r\n                        </div>\r\n                    });\r\n                }\r\n                else {\r\n                    if (result[0].dogimageref !== null && result[0].dogimageref !== \"\") {\r\n                        //if the dog has a reference image, use it\r\n                        console.log(\"dog image ref found - \" + result[0].dogimageref);\r\n                        this.setState({ imageSource: encodeURI(\"../../public/images/\" + String(result[0].dogimageref)) });\r\n                    }\r\n                    //setting the content of the page\r\n                    this.setState({\r\n                        pageContent: (\r\n                            <div>\r\n\r\n                                <div className=\"form-group files\">\r\n                                    <label htmlFor=\"image\">Image Upload: </label>\r\n                                    <input type=\"file\" id=\"image\" name=\"image\" className=\"form-control-file\" multiple=\"\" accept=\"image/*\" onChange={this.handleImageUpload} />\r\n                                    <span id=\"nameError\"></span>\r\n                                </div>\r\n\r\n                                <Link to={\"/dogs/details/\" + this.state.id}><button className=\"btn btn-light\">Cancel</button></Link>\r\n                                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.handleSubmit}>Update Image</button>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            }).catch(function (err) {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    handleSubmit() {\r\n        console.log('upload image state...')\r\n        console.log(this.state.uploadedImage);\r\n\r\n\r\n        if (this.state.uploadedImage !== null) {\r\n            const data = new FormData();\r\n            const file = this.state.uploadedImage;\r\n            data.append('id', this.state.id); //id is being sent\r\n            data.append('file', file);\r\n            console.log(\"data object's file field...\");\r\n            console.log(data.values());\r\n            fetch(\"/api/upload\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + this.props.jwtToken\r\n                },\r\n                body: data\r\n            }).then((response) => {\r\n                if (response.status === 403) {\r\n                    //token is expired, sign out and redirect to login form\r\n                    this.props.signOut();\r\n                    this.setState({ redirectToLogin: true });\r\n                    throw new Error(\"Bad response from server: token expired\");\r\n                }\r\n                if (response.status >= 400) {\r\n                    throw new Error(\"Bad response from server\");\r\n                    //TODO: redirect to an error page - currently still says it submits successfully on the front end\r\n                }\r\n                console.log(response.statusText);\r\n\r\n                //if no errors, redirect to details\r\n                this.setState({ redirectToDetails: <Redirect to={\"/dogs/details/\" + this.state.id + \"?cmd=updated\"} /> });\r\n            }).then((data) => {\r\n                console.log(data);\r\n            })\r\n                .catch(function (err) {\r\n                    console.log(err);\r\n                });\r\n        }\r\n        else {\r\n            this.setState({ errorMessage: 'Please upload an image file.' });\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.checkIfSignedIn()}\r\n                {this.state.redirectToDetails}\r\n\r\n                <h2>Change Image</h2>\r\n                <div>\r\n                    <img src={this.state.imageSource} className=\"change-image-image mb-5 mx-auto d-block\" alt=\"dog profile picture\" />\r\n                </div>\r\n                <div style={{ color: \"red\" }} id=\"errorMessage\">{this.state.errorMessage}</div>\r\n\r\n                {this.state.pageContent}\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nexport class About extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            buttonCount: 1\r\n        }\r\n        this.increaseCount = this.increaseCount.bind(this);\r\n    }\r\n\r\n    increaseCount() {\r\n        this.setState({ buttonCount: this.state.buttonCount + 1 });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>About Us</h1>\r\n                <p>Dog Website is a website dedicated to connecting shelters and dog fosterers in the GTA to potential adopters.</p>\r\n\r\n                <p>This website was developed as a passion project by Sam Bebenek in 2020 as a way to practice React and Express development. Dog Website is a single-page content\r\n                management system that features\r\n                React routing, authenticated logins, image uploading, and pagination. It is styled with a combination of Bootstrap and custom CSS. \r\n                The back-end is an Express RESTful API application that connects to a MySQL database.\r\n                </p>\r\n\r\n                <p>\r\n                    With more time to develop this website, I'd liked to include personal user accounts, multiple images per dog, internal messaging, and shelter pages.\r\n                </p>\r\n                <p className=\"mb-5\">Sam's portfolio website can be found <a href=\"http://sambebenek.com\" target=\"_blank\">here</a>.</p>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <div>\r\n                        <p className=\"text-center\">Dedicated to Dodger</p>\r\n                        <p className=\"text-center\">2005-2018</p>\r\n                        <img src=\"/dodger.jpg\" alt=\"Dodger the dog\" className=\"rounded\" width=\"300\" />\r\n                    </div>\r\n                </div>\r\n\r\n                {/*this.state.buttonCount}\r\n                <button onClick={this.increaseCount}>Click</button>*/}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class Contact extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            subject: '',\r\n            message: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Contact Us</h1>\r\n                <p>If you are a shelter representative or private dog fosterer and want to get in contact with us, please fill out the form below. Any other questions or concerns are also\r\n                welcome. One of our team members will get back to you as soon as possible!\r\n                </p>\r\n                <p><em>Note: this form is for demonstration purposes only, and messages will not be sent or read by anyone. For more information, see the <Link to=\"/about\">About Us</Link> page.</em></p>\r\n                <div className=\"dog-form\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"email\">Your Email Adress: <span className=\"text-danger\">*</span> </label>\r\n                        <input className=\"form-control\" type=\"text\" name=\"email\" id=\"email\" value={this.state.email} onChange={this.handleChange} required />\r\n                        <span id=\"emailError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"subject\">Subject: <span className=\"text-danger\">*</span></label>\r\n                        <input className=\"form-control\" type=\"text\" name=\"subject\" id=\"subject\" value={this.state.subject} onChange={this.handleChange} required />\r\n                        <span id=\"subjectError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"message\">Message: <span className=\"text-danger\">*</span></label>\r\n                        <textarea className=\"form-control\" name=\"message\" id=\"message\" onChange={this.handleChange} rows=\"4\" value={this.state.message}></textarea>\r\n                        <span id=\"descriptionError\"></span>\r\n                    </div>\r\n\r\n                    <Link to=\"/\"><button className=\"btn btn-primary float-right\" type=\"submit\">Send</button></Link>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nconst bcrypt = require('bcryptjs');\r\n\r\n//global variables\r\n\r\nexport class SignIn extends React.Component {\r\n    constructor(props) {\r\n        //setting the state of this SignIn component to have username and password variables, which are empty by default and change whenever the input values change\r\n        //the proper way to handle forms in react is save every form element as a state variable, change the states on input change, and handle validation on a onSubmit function\r\n        super(props);\r\n        this.state = {\r\n            signedInUsername: this.props.username,\r\n            username: '',\r\n            password: '',\r\n            redirectToHome: '',\r\n            errorMessage: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.checkIfSignedIn = this.checkIfSignedIn.bind(this);\r\n\r\n    }\r\n\r\n    //if a user is signed in, signedInUsername will not be null\r\n    checkIfSignedIn() {\r\n        if (this.state.signedInUsername !== null) {\r\n            this.setState({ redirectToHome: <Redirect to='/' /> });\r\n        }\r\n    }\r\n\r\n    //will call whenever new props are received\r\n    componentDidUpdate(prevProps) {\r\n        console.log(\"SignIn Page received new props!\");\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.username !== prevProps.username) {\r\n            console.log(\"The new prop was different from the old one - new username: \" + this.props.username)\r\n            this.setState({ signedInUsername: this.props.username });\r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles form submission and front end validation. Should also do back end validation\r\n     */\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (!e.target.checkValidity()) {\r\n            //form is not valid, required fields are empty\r\n            console.log(\"form invalid\");\r\n            this.setState({ errorMessage: \"*Username/password required\" });\r\n            document.getElementById(\"errorMessage\").innerHTML = \"*Username/password required\";\r\n            return;\r\n\r\n        }\r\n        else {\r\n            console.log(\"form valid!\");\r\n\r\n            //Bcrypt states that best hashing password is sending password over with SSL and hashing there\r\n            /*let hashedPassword = bcrypt.hash(this.state.password, 8)\r\n            console.log(hashedPassword);*/\r\n\r\n            //setting the data being posted to the server\r\n            let data = {\r\n                username: this.state.username,\r\n                password: this.state.password\r\n            }\r\n            //console.log(data);\r\n\r\n            this.setState({ errorMessage: \"Loading...\" });\r\n            fetch(\"/api/accounts/signin\", {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(data)\r\n            }).then(function (response) {\r\n                if (response.status >= 400) {\r\n                    throw new Error(\"Bad response from server\");\r\n                }\r\n                //important below - converts the response to a readable JSON object\r\n                return response.json();\r\n            }).then((result) => {\r\n                console.log(result);\r\n                if(result === null) {\r\n                    //not the best way to do 2 if statements that do the same thing\r\n                    console.log(\"no username/password combo found\");\r\n                    this.setState({ errorMessage: \"Invalid username/password.\" });\r\n                }\r\n                else if (result.length === 0) {\r\n                    console.log(\"no username/password combo found\");\r\n                    this.setState({ errorMessage: \"Invalid username/password.\" });\r\n                }\r\n                else {\r\n                    console.log(\"Username/password combo found!\");\r\n                    console.log(\"Result: \" + result)\r\n                    this.setState({ errorMessage: \"Welcome, \" + result.username + \"!\" });\r\n                    document.cookie = \"username=\" + result.username + \";max-age=3600\"; //cookie expires in one hour\r\n                    document.cookie = \"isadmin=\" + result.isadmin + \";max-age=3600\";\r\n                    document.cookie = \"jwtToken=\" + result.jwtToken + \";max-age=3600\";\r\n                    document.cookie = \"refreshToken=\" + result.refreshToken + \";max-age=3600\";\r\n                    console.log(\"Cookie from sign in: \" + document.cookie);\r\n                    this.props.signin();\r\n                    this.setState({ redirectToHome: <Redirect to='/' /> });\r\n                }\r\n            }).catch(function (err) {\r\n                console.log(err);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {this.checkIfSignedIn()}\r\n                {this.state.redirectToHome}\r\n                <h1>Sign In</h1>\r\n                <p id=\"loginError\"></p>\r\n                {/*noValidate allows you to automatically check if form fields are empty*/}\r\n                <form className=\"dog-form\" action=\"\" onSubmit={this.handleSubmit} noValidate>\r\n                    <div style={{ color: \"red\" }} id=\"errorMessage\">{this.state.errorMessage}</div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"username\">Username: </label>\r\n                        <input className=\"form-control\" type=\"text\" name=\"username\" id=\"username\" value={this.state.username} onChange={this.handleChange} required />\r\n                        <span id=\"usernameError\"></span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"password\">Password: </label>\r\n                        <input className=\"form-control\" type=\"password\" name=\"password\" id=\"password\" onChange={this.handleChange} required></input>\r\n                        <span id=\"passwordError\"></span>\r\n                    </div>\r\n                    <button className=\"btn btn-primary\" type=\"submit\">Sign In</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n//404 page\r\nexport const NoMatch = ({ location }) => (\r\n    <div>\r\n      <h3>No page for <code>{location.pathname}</code> found :(</h3>\r\n      <Link to=\"\"><p>Home</p></Link>\r\n    </div>\r\n  );","//import React\r\nimport React from 'react';\r\n//import the react routing functionality - source: https://reacttraining.com/react-router/web/guides/quick-start\r\nimport { BrowserRouter as Router, Switch, Route, Redirect, useHistory } from 'react-router-dom';\r\nimport { withRouter } from 'react-router'\r\n\r\n\r\n//import components\r\nimport { WebsiteHeader } from './WebsiteHeader';\r\nimport { Home } from './Home';\r\nimport { Details } from './dogs/Details';\r\nimport { List } from './dogs/List';\r\nimport { Add } from './dogs/Add';\r\nimport { Update } from './dogs/Update';\r\nimport { ChangeImage } from './dogs/ChangeImage';\r\n\r\n\r\nimport { About } from './About';\r\nimport { Contact } from './Contact';\r\nimport { SignIn } from './SignIn';\r\nimport { NoMatch } from './NoMatch';\r\n\r\n\r\n\r\n/**\r\n * This class is the master layout of the website and will hold global states\r\n */\r\nexport class MasterPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: null,\r\n            isAdmin: 0,\r\n            redirectHome: '',\r\n            jwtToken: '',\r\n            refreshToken: '',\r\n        }\r\n        this.signOut = this.signOut.bind(this);\r\n        this.deleteCookies = this.deleteCookies.bind(this);\r\n        this.checkCookies = this.checkCookies.bind(this);\r\n\r\n    }\r\n    componentWillMount() {\r\n        document.title = \"Dog Website\";\r\n        this.checkCookies();\r\n    }\r\n\r\n    //runs after rendering is done\r\n    componentDidMount() {\r\n        console.log(\"page is done rendering\");\r\n    }\r\n\r\n    checkCookies() {\r\n        //if a cookie exists and contains the correct values\r\n        if (document.cookie !== null && getCookie(\"username\") !== '' && getCookie(\"jwtToken\") !== '' && getCookie(\"refreshToken\") !== '') {\r\n            console.log(\"username from cookie: \" + getCookie(\"username\"));\r\n            console.log(\"isadmin from cookie: \" + getCookie(\"isadmin\"));\r\n            console.log(\"jwttoken from cookie: \" + getCookie(\"jwtToken\")); //TODO: u should validate the jwt token on page load\r\n            console.log(\"refreshtoken from cookie: \" + getCookie(\"refreshToken\"));\r\n            this.setState({ username: getCookie(\"username\"), isAdmin: getCookie(\"isadmin\"), jwtToken: getCookie(\"jwtToken\"), refreshToken: getCookie(\"refreshToken\") });\r\n        }\r\n        else {\r\n            console.log(\"no cookies with the correct values!\");\r\n            this.setState({ username: null });\r\n        }\r\n\r\n    }\r\n    deleteCookies() {\r\n        console.log(\"deleting cookies...\")\r\n        document.cookie = 'username=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n        document.cookie = 'jwttoken=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n        document.cookie = 'refreshtoken=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n        document.cookie = 'isadmin=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n    }\r\n\r\n\r\n    signOut() {\r\n        //do the logout api call to delete your refresh key\r\n        //then delete the cookies\r\n        //then erase the MasterPage's username state \r\n        //then redirect to the home page (done inside WebsiteHeader.js)\r\n        this.setState({ username: null, isAdmin: 0, redirectHome: <Redirect to='/?signout=true' /> });\r\n        console.log(\"You have signed out!\");\r\n        this.deleteCookies();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n\r\n                <WebsiteHeader username={this.state.username} signout={this.signOut} />\r\n                <div className=\"page-wrapper\">\r\n\r\n                    <img className=\"dog-banner\" src=\"/dog-banner.jpg\" alt=\"dog website banner - some dogs playing\" />\r\n\r\n                    <div className=\"content-holder\">\r\n                        <Switch>\r\n                            {/*<Route exact path=\"/dogs\" component={withRouter(Dogs)}>\r\n                    </Route>*/}\r\n                            <Route exact path=\"/dogs/add\" render={(props) => (\r\n                                <Add {...props} isAdmin={this.state.isAdmin} jwtToken={this.state.jwtToken} signOut={this.signOut} />\r\n                            )}>\r\n                            </Route>\r\n                            <Route exact path=\"/dogs\" render={(props) => (\r\n                                <List {...props} isAdmin={this.state.isAdmin} jwtToken={this.state.jwtToken} />\r\n                            )}></Route>\r\n                            <Route exact path=\"/dogs/:page\" render={(props) => (\r\n                                <List {...props} isAdmin={this.state.isAdmin} jwtToken={this.state.jwtToken} />\r\n                            )}>\r\n                            </Route>\r\n                            <Route exact path=\"/dogs/details/:id\" render={(props) => (\r\n                                <Details {...props} isAdmin={this.state.isAdmin} jwtToken={this.state.jwtToken} signOut={this.signOut} />\r\n                            )}></Route>\r\n\r\n                            <Route exact path=\"/dogs/update/:id\" render={(props) => (\r\n                                <Update {...props} isAdmin={this.state.isAdmin} jwtToken={this.state.jwtToken} signOut={this.signOut} />\r\n                            )}>\r\n                            </Route>\r\n                            <Route exact path=\"/dogs/changeimage/:id\" render={(props) => (\r\n                                <ChangeImage {...props} isAdmin={this.state.isAdmin} jwtToken={this.state.jwtToken} signOut={this.signOut} />\r\n                            )}>\r\n                            </Route>\r\n                            <Route exact path=\"/contact\">\r\n                                <Contact />\r\n                            </Route>\r\n                            <Route exact path=\"/about\">\r\n                                <About />\r\n                            </Route>\r\n                            <Route exact path=\"/signin\" render={(props) => (\r\n                                <SignIn {...props} signin={this.checkCookies} username={this.state.username} />\r\n                            )} >\r\n                            </Route>\r\n                            <Route path=\"/\" exact>\r\n                                <Home />\r\n                            </Route>\r\n                            <Route component={NoMatch} />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n\r\n            </Router>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n//TODO: move this outside into a helper class\r\nfunction getCookie(cname) {\r\n    var name = cname + \"=\";\r\n    var decodedCookie = decodeURIComponent(document.cookie);\r\n    var ca = decodedCookie.split(';');\r\n    for (var i = 0; i < ca.length; i++) {\r\n        var c = ca[i];\r\n        while (c.charAt(0) === ' ') {\r\n            c = c.substring(1);\r\n        }\r\n        if (c.indexOf(name) === 0) {\r\n            return c.substring(name.length, c.length);\r\n        }\r\n    }\r\n    return \"\";\r\n}","//import React\nimport React from 'react';\n//routing done in MasterPage.js\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n\n//load the logo image into a variable\n//import logo from './logo.svg';\n//load the css here\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\n//import components\nimport { MasterPage } from './components/MasterPage';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <MasterPage />\n      </Router>\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}